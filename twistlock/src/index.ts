import { setupCli } from "./twistlock";
import type { TwistlockRun } from "./twistlock";
import { yarnWhyFormat } from "./yarnWhyFormat";
import { postGithubComment } from "./githubComment";
import * as core from "@actions/core";

const tag =
  '\n<p align="right"><em>Generated by <a href="https://github.com/resideo/actions/tree/master/twistlock">resideo/actions/twistlock</a>.<br>Please <a href="https://github.com/resideo/actions/issues/new">create an issue</a> in the repository if you have any feedback.<em></p><!-- Twistlock Action by Frontside Software -->';

export function* run({
  user,
  password,
  token,
  consoleUrl,
  project,
  repositoryPath,
  image,
  githubComment,
  scanPathScope,
  octokit,
}: TwistlockRun) {
  const twistcli = yield setupCli({
    user,
    password,
    token,
    consoleUrl,
    project,
  });

  console.log(`running in ${repositoryPath}`);
  const { results, code } = yield twistcli.scanRepository({
    repositoryPath,
    image,
  });

  console.log(`results: ${results}`);

  const vulnerabilities = !results.vulnerabilities
    ? results?.results[0].vulnerabilities
    : results?.vulnerabilities;

  const packageList = !results?.packages
    ? results?.results[0].packages
    : results?.packages;

  const compliances = !results?.compliances
    ? results?.results[0].compliances
    : results?.compliances;

  let finalMessage = "";

  if (vulnerabilities) {
    const { message, graceStatus } = yield yarnWhyFormat({
      vulnerabilities,
      packageList,
      repositoryPath,
      scanPathScope,
    });

    console.log("::group::comment");
    console.dir(message);
    console.log("::endgroup::");

    finalMessage += message + "\n\n";
    if (graceStatus !== "pass")
      core.setFailed(
        "One or more packages have an overdue security resolution."
      );
  }

  if (compliances) {
    console.log("::group::compliances");
    console.dir(compliances);
    console.log("::endgroup::");

    const message = `## Compliance Issues\n\n\`\`\`\n${JSON.stringify(
      compliances,
      null,
      2
    )}\n\`\`\``;
    finalMessage += message + "\n\n";
    core.setFailed("One or more compliance issues have been flagged.");
  }

  if (finalMessage === "")
    finalMessage =
      "There are no security vulnerabilities or compliance issues.\n\n";
  if (githubComment)
    yield postGithubComment(octokit, { message: finalMessage + tag, tag });

  if (code !== 0)
    core.warning(
      `CLI exited with code ${code}. This implies there may be compliance issues.`
    );
}
